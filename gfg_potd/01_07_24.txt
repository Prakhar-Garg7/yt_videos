class GfG 
{   
    public static int[] makeArrayFromLinkedList(Node head){
        ArrayList<Integer> list = new ArrayList<>();
        Node ptr = head;
        while(ptr != null) {
            list.add(ptr.data);
            ptr = ptr.next;
        }
        int sizeOfList = list.size();
        int[] ans = new int[sizeOfList];
        for(int i = 0; i < sizeOfList; i++){
            ans[i] = list.get(i);
        }
        return ans;
    }
    public static Tree constructBinaryTree(int[] arr, int ptr, int n){
        if(ptr >= n) return null;
        Tree root = new Tree(arr[ptr]);
        root.left = constructBinaryTree(arr, 2 * ptr + 1, n);
        root.right = constructBinaryTree(arr, 2 * ptr + 2, n);
        return root;
    }
    //Function to make binary tree from linked list.
    public static Tree convert(Node head, Tree node) {
        // add code here.}
        int[] arr = makeArrayFromLinkedList(head);
        int n = arr.length;
        return constructBinaryTree(arr, 0, n);
    }
}  
