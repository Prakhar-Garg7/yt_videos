/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;
import java.io.*;
class Solution {
    public TreeNode fun(List<Integer> list, int start, int end){
        if(start > end) return null;
        int mid = start + (end - start) / 2;
        TreeNode root = new TreeNode(list.get(mid));
        root.left = fun(list, start, mid - 1);
        root.right = fun(list, mid + 1, end);
        return root;
    }
    public List<Integer> findInorderTraversal(TreeNode root){
        List<Integer> list = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        while(true){
            if(root != null){
                stack.push(root);
                root = root.left;
            } else {
                if(stack.isEmpty()) break;
                TreeNode delNode = stack.pop();
                list.add(delNode.val);
                root = delNode.right;
            }
        }
        return list;
    }
    public TreeNode balanceBST(TreeNode root) {
        if(root == null) return root;
        // performed inorder traversal
        List<Integer> list = findInorderTraversal(root);
        int n = list.size();
        return fun(list, 0, n - 1);
    }
}
